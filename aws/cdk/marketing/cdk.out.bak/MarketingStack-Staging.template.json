{
 "Resources": {
  "RootHostedZone28FAB023": {
   "Type": "AWS::Route53::HostedZone",
   "Properties": {
    "Name": "marketing.dev-code.org."
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/RootHostedZone/Resource"
   }
  },
  "TLSCertificateD5EE7EF3": {
   "Type": "AWS::CertificateManager::Certificate",
   "Properties": {
    "DomainName": "dev.marketing.dev-code.org",
    "DomainValidationOptions": [
     {
      "DomainName": "dev.marketing.dev-code.org",
      "HostedZoneId": {
       "Ref": "RootHostedZone28FAB023"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/TLSCertificate"
     }
    ],
    "ValidationMethod": "DNS"
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/TLSCertificate/Resource"
   }
  },
  "Vpc8378EB38": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/Resource"
   }
  },
  "VpcPublicSubnet1Subnet5C2D37C4": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "us-west-2a",
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet1/Subnet"
   }
  },
  "VpcPublicSubnet1RouteTable6C95E38E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet1/RouteTable"
   }
  },
  "VpcPublicSubnet1RouteTableAssociation97140677": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet1/RouteTableAssociation"
   }
  },
  "VpcPublicSubnet1DefaultRoute3DA9E72A": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    },
    "RouteTableId": {
     "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet1/DefaultRoute"
   }
  },
  "VpcPublicSubnet1EIPD7E02669": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet1/EIP"
   }
  },
  "VpcPublicSubnet1NATGateway4D7517AA": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "VpcPublicSubnet1EIPD7E02669",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "VpcPublicSubnet1DefaultRoute3DA9E72A",
    "VpcPublicSubnet1RouteTableAssociation97140677"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet1/NATGateway"
   }
  },
  "VpcPublicSubnet2Subnet691E08A3": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "us-west-2b",
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet2/Subnet"
   }
  },
  "VpcPublicSubnet2RouteTable94F7E489": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet2/RouteTable"
   }
  },
  "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet2RouteTable94F7E489"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet2Subnet691E08A3"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet2/RouteTableAssociation"
   }
  },
  "VpcPublicSubnet2DefaultRoute97F91067": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    },
    "RouteTableId": {
     "Ref": "VpcPublicSubnet2RouteTable94F7E489"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet2/DefaultRoute"
   }
  },
  "VpcPublicSubnet2EIP3C605A87": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet2/EIP"
   }
  },
  "VpcPublicSubnet2NATGateway9182C01D": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "VpcPublicSubnet2EIP3C605A87",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet2Subnet691E08A3"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "VpcPublicSubnet2DefaultRoute97F91067",
    "VpcPublicSubnet2RouteTableAssociationDD5762D8"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PublicSubnet2/NATGateway"
   }
  },
  "VpcPrivateSubnet1Subnet536B997A": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "us-west-2a",
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PrivateSubnet1/Subnet"
   }
  },
  "VpcPrivateSubnet1RouteTableB2C5B500": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PrivateSubnet1/RouteTable"
   }
  },
  "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
    },
    "SubnetId": {
     "Ref": "VpcPrivateSubnet1Subnet536B997A"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PrivateSubnet1/RouteTableAssociation"
   }
  },
  "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
    },
    "RouteTableId": {
     "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PrivateSubnet1/DefaultRoute"
   }
  },
  "VpcPrivateSubnet2Subnet3788AAA1": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "us-west-2b",
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PrivateSubnet2/Subnet"
   }
  },
  "VpcPrivateSubnet2RouteTableA678073B": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PrivateSubnet2/RouteTable"
   }
  },
  "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPrivateSubnet2RouteTableA678073B"
    },
    "SubnetId": {
     "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PrivateSubnet2/RouteTableAssociation"
   }
  },
  "VpcPrivateSubnet2DefaultRoute060D2087": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "VpcPublicSubnet2NATGateway9182C01D"
    },
    "RouteTableId": {
     "Ref": "VpcPrivateSubnet2RouteTableA678073B"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/PrivateSubnet2/DefaultRoute"
   }
  },
  "VpcIGWD7BA715C": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/Vpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/IGW"
   }
  },
  "VpcVPCGWBF912B6E": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "VpcIGWD7BA715C"
    },
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/VPCGW"
   }
  },
  "VpcRestrictDefaultSecurityGroupCustomResourceC73DA2BE": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "Vpc8378EB38",
      "DefaultSecurityGroup"
     ]
    },
    "Account": "165336972514"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Vpc/RestrictDefaultSecurityGroupCustomResource/Default"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:ec2:us-west-2:165336972514:security-group/",
             {
              "Fn::GetAtt": [
               "Vpc8378EB38",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-165336972514-us-west-2",
     "S3Key": "7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler",
    "aws:asset:path": "asset.7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200",
    "aws:asset:property": "Code"
   }
  },
  "EcsCluster97242B84": {
   "Type": "AWS::ECS::Cluster",
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupInstanceRole3C026863": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/InstanceRole/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EcsCluster97242B84",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "EcsCluster97242B84",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:GetAuthorizationToken",
        "ecs:DiscoverPollEndpoint",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80",
    "Roles": [
     {
      "Ref": "EcsClusterDefaultAutoScalingGroupInstanceRole3C026863"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupInstanceProfile2CE606B3": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "EcsClusterDefaultAutoScalingGroupInstanceRole3C026863"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/InstanceProfile"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLaunchTemplate3719972A": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Arn": {
       "Fn::GetAtt": [
        "EcsClusterDefaultAutoScalingGroupInstanceProfile2CE606B3",
        "Arn"
       ]
      }
     },
     "ImageId": {
      "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
     },
     "InstanceType": "t3.micro",
     "Monitoring": {
      "Enabled": false
     },
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/LaunchTemplate"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/LaunchTemplate"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": {
       "Fn::Join": [
        "",
        [
         "#!/bin/bash\necho ECS_CLUSTER=",
         {
          "Ref": "EcsCluster97242B84"
         },
         " >> /etc/ecs/ecs.config"
        ]
       ]
      }
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/LaunchTemplate"
       }
      ]
     }
    ]
   },
   "DependsOn": [
    "EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80",
    "EcsClusterDefaultAutoScalingGroupInstanceRole3C026863"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/LaunchTemplate/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupASGC1A785DB": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "EcsClusterDefaultAutoScalingGroupLaunchTemplate3719972A"
     },
     "Version": {
      "Fn::GetAtt": [
       "EcsClusterDefaultAutoScalingGroupLaunchTemplate3719972A",
       "LatestVersionNumber"
      ]
     }
    },
    "MaxSize": "1",
    "MinSize": "1",
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup"
     }
    ],
    "VPCZoneIdentifier": [
     {
      "Ref": "VpcPrivateSubnet1Subnet536B997A"
     },
     {
      "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingReplacingUpdate": {
     "WillReplace": true
    },
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/ASG"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ec2:DescribeHosts",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeInstances"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "autoscaling:CompleteLifecycleAction",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:autoscaling:us-west-2:165336972514:autoScalingGroup:*:autoScalingGroupName/",
          {
           "Ref": "EcsClusterDefaultAutoScalingGroupASGC1A785DB"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "ecs:DescribeContainerInstances",
        "ecs:DescribeTasks",
        "ecs:ListTasks",
        "ecs:UpdateContainerInstancesState"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "EcsCluster97242B84",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:ListContainerInstances",
        "ecs:SubmitContainerStateChange",
        "ecs:SubmitTaskStateChange"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EcsCluster97242B84",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396",
    "Roles": [
     {
      "Ref": "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(dict(event, ResponseURL='...')))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n\n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n\n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n\n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
    },
    "Environment": {
     "Variables": {
      "CLUSTER": {
       "Ref": "EcsCluster97242B84"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup"
     }
    ],
    "Timeout": 310
   },
   "DependsOn": [
    "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396",
    "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokeMarketingStackStagingEcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic95087268B8908C03": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/AllowInvoke:MarketingStackStagingEcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic95087268"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic8F34E394": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E",
      "Arn"
     ]
    },
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "autoscaling.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88",
    "Roles": [
     {
      "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookFFA63029": {
   "Type": "AWS::AutoScaling::LifecycleHook",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "EcsClusterDefaultAutoScalingGroupASGC1A785DB"
    },
    "DefaultResult": "CONTINUE",
    "HeartbeatTimeout": 300,
    "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
    "NotificationTargetARN": {
     "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4"
    },
    "RoleARN": {
     "Fn::GetAtt": [
      "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88",
    "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource"
   }
  },
  "FargateServiceLBB353E155": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "FargateServiceLBSecurityGroup5F444C78",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
     },
     {
      "Ref": "VpcPublicSubnet2Subnet691E08A3"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "VpcPublicSubnet1DefaultRoute3DA9E72A",
    "VpcPublicSubnet1RouteTableAssociation97140677",
    "VpcPublicSubnet2DefaultRoute97F91067",
    "VpcPublicSubnet2RouteTableAssociationDD5762D8"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/LB/Resource"
   }
  },
  "FargateServiceLBSecurityGroup5F444C78": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB MarketingStackStagingFargateServiceLBBCABD8FF",
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 443",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/LB/SecurityGroup/Resource"
   }
  },
  "FargateServiceLBSecurityGrouptoMarketingStackStagingFargateServiceSecurityGroup53A7693830006504B1D3": {
   "Type": "AWS::EC2::SecurityGroupEgress",
   "Properties": {
    "Description": "Load balancer to target",
    "DestinationSecurityGroupId": {
     "Fn::GetAtt": [
      "FargateServiceSecurityGroup262B61DD",
      "GroupId"
     ]
    },
    "FromPort": 3000,
    "GroupId": {
     "Fn::GetAtt": [
      "FargateServiceLBSecurityGroup5F444C78",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "ToPort": 3000
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/LB/SecurityGroup/to MarketingStackStagingFargateServiceSecurityGroup53A76938:3000"
   }
  },
  "FargateServiceLBPublicListener4B4929CA": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "Certificates": [
     {
      "CertificateArn": {
       "Ref": "TLSCertificateD5EE7EF3"
      }
     }
    ],
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "FargateServiceLBPublicListenerECSGroupBE57E081"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "FargateServiceLBB353E155"
    },
    "Port": 443,
    "Protocol": "HTTPS"
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/LB/PublicListener/Resource"
   }
  },
  "FargateServiceLBPublicListenerECSGroupBE57E081": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/LB/PublicListener/ECSGroup/Resource"
   }
  },
  "FargateServiceDNS764E1362": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::Join": [
       "",
       [
        "dualstack.",
        {
         "Fn::GetAtt": [
          "FargateServiceLBB353E155",
          "DNSName"
         ]
        }
       ]
      ]
     },
     "HostedZoneId": {
      "Fn::GetAtt": [
       "FargateServiceLBB353E155",
       "CanonicalHostedZoneID"
      ]
     }
    },
    "HostedZoneId": {
     "Ref": "RootHostedZone28FAB023"
    },
    "Name": "dev.marketing.dev-code.org.",
    "Type": "A"
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/DNS/Resource"
   }
  },
  "FargateServiceTaskDefTaskRole8CDCF85E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/TaskDef/TaskRole/Resource"
   }
  },
  "FargateServiceTaskDef940E3A80": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "CONTENTFUL_SPACE_ID",
        "Value": "90t6bu6vlf76"
       },
       {
        "Name": "CONTENTFUL_ENV_ID",
        "Value": "master"
       },
       {
        "Name": "CONTENTFUL_API_HOST",
        "Value": "cdn.contentful.com"
       },
       {
        "Name": "CONTENTFUL_EXPERIENCE_CONTENT_TYPE_ID",
        "Value": "experience"
       }
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         "ghcr.io/code-dot-org/marketing@sha256:",
         {
          "Ref": "ContainerImageHash"
         }
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "FargateServiceTaskDefwebLogGroup71FAF541"
        },
        "awslogs-stream-prefix": "FargateService",
        "awslogs-region": "us-west-2"
       }
      },
      "Name": "web",
      "PortMappings": [
       {
        "ContainerPort": 3000,
        "Protocol": "tcp"
       }
      ],
      "Secrets": [
       {
        "Name": "CONTENTFUL_TOKEN",
        "ValueFrom": "arn:aws:secretsmanager:us-west-2:165336972514:secret:development/marketing/90t6bu6vlf76/contentful-fOz371:CONTENTFUL_TOKEN::"
       }
      ]
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "FargateServiceTaskDefExecutionRole9194820E",
      "Arn"
     ]
    },
    "Family": "MarketingStackStagingFargateServiceTaskDef08B4A6FA",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "FargateServiceTaskDefTaskRole8CDCF85E",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/TaskDef/Resource"
   }
  },
  "FargateServiceTaskDefwebLogGroup71FAF541": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/TaskDef/web/LogGroup/Resource"
   }
  },
  "FargateServiceTaskDefExecutionRole9194820E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/TaskDef/ExecutionRole/Resource"
   }
  },
  "FargateServiceTaskDefExecutionRoleDefaultPolicy827E7CA2": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargateServiceTaskDefwebLogGroup71FAF541",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:secretsmanager:us-west-2:165336972514:secret:development/marketing/90t6bu6vlf76/contentful-fOz371"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargateServiceTaskDefExecutionRoleDefaultPolicy827E7CA2",
    "Roles": [
     {
      "Ref": "FargateServiceTaskDefExecutionRole9194820E"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/TaskDef/ExecutionRole/DefaultPolicy/Resource"
   }
  },
  "FargateServiceECC8084D": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "EcsCluster97242B84"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "web",
      "ContainerPort": 3000,
      "TargetGroupArn": {
       "Ref": "FargateServiceLBPublicListenerECSGroupBE57E081"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "FargateServiceSecurityGroup262B61DD",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "VpcPrivateSubnet1Subnet536B997A"
       },
       {
        "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "FargateServiceTaskDef940E3A80"
    }
   },
   "DependsOn": [
    "FargateServiceLBPublicListenerECSGroupBE57E081",
    "FargateServiceLBPublicListener4B4929CA",
    "FargateServiceTaskDefTaskRole8CDCF85E"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/Service/Service"
   }
  },
  "FargateServiceSecurityGroup262B61DD": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "MarketingStack-Staging/FargateService/Service/SecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "DependsOn": [
    "FargateServiceTaskDefTaskRole8CDCF85E"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/Service/SecurityGroup/Resource"
   }
  },
  "FargateServiceSecurityGroupfromMarketingStackStagingFargateServiceLBSecurityGroupB74BF584300089D70B45": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Load balancer to target",
    "FromPort": 3000,
    "GroupId": {
     "Fn::GetAtt": [
      "FargateServiceSecurityGroup262B61DD",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "FargateServiceLBSecurityGroup5F444C78",
      "GroupId"
     ]
    },
    "ToPort": 3000
   },
   "DependsOn": [
    "FargateServiceTaskDefTaskRole8CDCF85E"
   ],
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/FargateService/Service/SecurityGroup/from MarketingStackStagingFargateServiceLBSecurityGroupB74BF584:3000"
   }
  },
  "MarketingGithubDeployerUserDB7FDCE9": {
   "Type": "AWS::IAM::User",
   "Properties": {
    "UserName": "marketing-github-deployer-development"
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/MarketingGithubDeployerUser/Resource"
   }
  },
  "MarketingGithubDeployerUserPolicy1C0AFBC0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Resource": "arn:aws:iam::165336972514:role/cdk-hnb659fds-deploy-role-165336972514-us-west-2"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MarketingGithubDeployerUserIamUserPolicy",
    "Users": [
     {
      "Ref": "MarketingGithubDeployerUserDB7FDCE9"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/MarketingGithubDeployerUserPolicy/Resource"
   }
  },
  "MarketingGithubDeployerAccessKey1CA60C3C": {
   "Type": "AWS::IAM::AccessKey",
   "Properties": {
    "UserName": {
     "Ref": "MarketingGithubDeployerUserDB7FDCE9"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/MarketingGithubDeployerAccessKey/Resource"
   }
  },
  "MarketingGithubDeployerAccessKeySecret7F2AF001": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "SecretString": {
     "Fn::Join": [
      "",
      [
       "{\"accessKeyId\":\"",
       {
        "Ref": "MarketingGithubDeployerAccessKey1CA60C3C"
       },
       "\",\"secretAccessKey\":\"",
       {
        "Fn::GetAtt": [
         "MarketingGithubDeployerAccessKey1CA60C3C",
         "SecretAccessKey"
        ]
       },
       "\"}"
      ]
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/MarketingGithubDeployerAccessKeySecret/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21TXW/bMAz8LX1XtSVDsb2mWT+CBZsRZ33YS8HIjMtGlgyRSlEY/u+DFSd2mj7x7nQyeBQ91ZPvN3pyBW98bYrdtaWNbnIBs1Pwxs9N8FHw5ptuHj0LFv+8QzXfuhGbrdD4UHTqAeUorTIYhLZkQLACByUG3cwHrXOPaKvQTHXzVJvu4CmbqyxuLJk8bhxKpw1o1XW0ho3FQR+0GbM3BELencwduFtkXfkN8gCCb/CuskB7EBw+vHCCweHJcOikZzMRMC8VOlE5mhhI3h+Cj3Xq4UxYQnTmZY1Vbfugl8rZjbsyIPOFvHBJ70bDupnbyIIhza2H9xBK6GLz7iduydEx9EfFOwFyGEZafzfHsCfTt5RgqyCKZwOWXKmbWRSfH8gp7oW2pC2ad2Px0ftdCjwWWkVQ6WblDw+WauYtmTThAS0cCziDWfBbsqj+8iFuqjNjkPkXJueJtMpCtSlAN/fRmWP8Mc4wVMRM3rWKHesmjxs2geqj4YyvfU1pAxNIk3+uQbq1YD2ra9stK3m39FDcgu26LT5MEi2wkLEeik1ykCv3U918fjsFPONjH7Gg6z1HPDpfQyhRTs8yoq2yvmTdLP3wakfcKkYTUPj0W+aJ9/sXUNpWrZB9DN1iRBZfDbT7xz89yoLfU4HhFhjVjBklFyjJlekVIECF/fr+iVJHaZXzBepX/rKfftWTH3py9cpE1yE6oQr16lD/AypptTKfBAAA"
   },
   "Metadata": {
    "aws:cdk:path": "MarketingStack-Staging/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
  },
  "ContainerImageHash": {
   "Type": "String",
   "Description": "The sha256sum of the marketing container image."
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "FargateServiceLoadBalancerDNS9433D5F6": {
   "Value": {
    "Fn::GetAtt": [
     "FargateServiceLBB353E155",
     "DNSName"
    ]
   }
  },
  "FargateServiceServiceURL47701F45": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "FargateServiceDNS764E1362"
      }
     ]
    ]
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}