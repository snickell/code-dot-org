<Pythonlab>
  <config><![CDATA[{
  "game_id": 72,
  "created_at": "2025-01-22T19:56:56.000Z",
  "level_num": "custom",
  "user_id": 1196,
  "properties": {
    "encrypted": "false",
    "long_instructions": "## Functions with Parameters\r\n\r\nCreate a function with a parameter to streamline repetitive actions. In this example, the character is planting beanstalks to grow a magical garden. \r\n\r\n- Read the code. What code needs to change if you wanted the character to plant garlic bulbs instead of beanstalks? \r\n- Refactor the starter code into a reusable function called `plant_garden(item)`. See the [documentation](a link) and discuss with your partner what it says about:\r\n    - defining a function with a parameter (e.g. `item`)\r\n    - using the parameter in function definition with `print()`\r\n    - calling the function with an argument\r\n    - Add a comment explaining the purpose of the `plant_garden(item)` function and how the parameter `item` is used.\r\n- Test and modify: test the function by calling it multiple times with different colors (e.g. `plant_garden(\"garlic bulb\")`, `plant_garden(\"beanstalk\")`)\r\n- Reflect: how did adding the parameter `item` make the function more flexible?",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "enable_micro_bit": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "\n# Refactor the code below into a plant_garden(character, item) function\n\ndef plant_garden(character):\n    print(f\"{character} plants beanstalk\")\n    print(f\"{character} moves to the next spot.\")\n    print(f\"{character} plants beanstalk\")\n    print(f\"{character} moves to the next spot.\")\n    print(f\"{character} plants beanstalk\")\n    print(f\"{character} moves to the next spot.\")\n    print(f\"{character} plants beanstalk\")\n    print(f\"{character} moves to the next spot.\")\n\n# Call your function here\n",
          "folderId": "0",
          "active": true,
          "open": true
        }
      },
      "folders": {
      },
      "openFiles": [
        "0"
      ]
    },
    "encrypted_exemplar_sources": "Cy05mEYW43yx3lpwk/lyQYs4qPKDc2JDG2xzW6EZ2HXNXiuQgI6R1SlqPKPt\nlYISiQp/Zt7oXvHNpBSUY2/tVcAoh32dY5clMNiyTLp2qQ5O47DJ0rGD0IJV\nXDiO//IRW/LZBlXyH5JryMNp/3+nzuj4wvKl/PYXtA1u/nVF1aH+PiG+QcWx\nt4Kz0GTg8y/twu2sS6dFQ1BVQk/7yjpNXawheE69p6lm9wvQwA5zXHKKZP9w\nV+BD5qcVvi1FQHP5WbWjMi8SZam9nhLd5Kv4yBGtIuBnkhag5McqmGixoBl7\nxaf7Dl/NBubMRTEAK2alhjl30cApUUbH5V2reqs/ArB7Cne2/IDO8JDZaOEk\nnyr3zwuieuQtx8vwvmymSU2cS1OAzx/7ovz2eqQRP2RVOTZETf4kzfNW96PL\nL0GIzen4Gfucwkl9yOZQiEdI8q8o68F7vccslfWy+Cgku7Z4X9FNA2hWtCSv\ns2u6keem7stnpN1cRlLfxuR/OVVZV2RRh2ozxBLxUfysf358QIqNkbf2JJa3\ngwKZj4EB1YXGyON8SPOb067t3t1z4l4NXWMcpjxuuRmcHiCVh9TAfgud2kzL\nZJwbYtPAzERtcYGX0arms865VdP+coNG0ia5FZ5nJkMDrmMmXTu4cYmTqWnv\noXujsz2FEwQtptICtjguLA8V92QTZph8wsLuL9Rd+GuXxHhDQRFmsYFZxYnu\nlW7D+SYRhYsnSfvhXeJFrx4OinwFATxDOKcUXfaF2rwIeBnPS12PvpL3A7ip\nA5yliDtDHusuaCIQ44NCawBWXrFZZcX2Ag6noJ1/EoJQQHZ2xjNl7/j3zmCl\nRMGMs1+vXFV3QHmb5ulk7+QPsWcQ5lcX/Og=\n",
    "validation_file": {
      "id": "1",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\n\nclass TestAddParameter(unittest.TestCase):\n\n    def test_add_second_parameter(self):\n        try:\n            with open('main.py', 'r') as f:\n                content = f.read()\n\n            # Check if the function definition includes a second parameter\n            if 'def plant_garden(character, item):' not in content:\n                self.fail(\"You haven't added a second parameter 'item' to the 'plant_garden' function. Please update the function definition.\")\n\n        except FileNotFoundError:\n            self.fail(\"The file 'main.py' was not found. Please make sure it exists in the same directory.\")\n        except Exception as e:\n            self.fail(f\"Error running the test: {e}\")\n\n    def test_replace_beanstalk_with_item(self):\n        try:\n            with open('main.py', 'r') as f:\n                content = f.read()\n\n            # Check if all instances of \"beanstalk\" have been replaced with {item} using f-strings\n            if 'f\"{character} plants beanstalk\"' in content:\n                self.fail(\"You haven't replaced 'beanstalk' with {item} in the 'plant_garden' function. Make sure to use f\\\"{character} plants {item}\\\".\")\n\n        except FileNotFoundError:\n            self.fail(\"The file 'main.py' was not found. Please make sure it exists in the same directory.\")\n        except Exception as e:\n            self.fail(f\"Error running the test: {e}\")\n\n    def test_call_function_with_new_parameters(self):\n        try:\n            with open('main.py', 'r') as f:\n                content = f.read()\n\n            # Check if the function is called with two arguments\n            lines = content.splitlines()\n            function_called = any(\n                line.strip().startswith('plant_garden(') and ',' in line and ')' in line\n                for line in lines\n            )\n\n            if not function_called:\n                self.fail(\"You haven't called the 'plant_garden' function with two arguments. Please make sure to call it with both 'character' and 'item'.\")\n\n        except FileNotFoundError:\n            self.fail(\"The file 'main.py' was not found. Please make sure it exists in the same directory.\")\n        except Exception as e:\n            self.fail(f\"Error running the test: {e}\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2025-01-22T19:56:56.323+00:00\",\"changed\":[\"cloned from \\\"python-intro-console-lesson7-meetSidekick\\\"\"],\"cloned_from\":\"python-intro-console-lesson7-meetSidekick\"},{\"changed_at\":\"2025-01-22 20:02:09 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-22 20:04:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-22 20:58:31 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-22 20:59:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-22 21:15:49 +0000\",\"changed\":[],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-22 21:28:06 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-22 21:29:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-22 23:49:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-22 23:53:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-23 00:29:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-23 00:32:55 +0000\",\"changed\":[\"validation_file\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"},{\"changed_at\":\"2025-01-23 00:34:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":1196,\"changed_by_email\":\"amy.woodman@code.org\"}]"
}]]></config>
</Pythonlab>
