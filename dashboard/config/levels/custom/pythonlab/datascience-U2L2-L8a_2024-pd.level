<Pythonlab>
  <config><![CDATA[{
  "published": true,
  "game_id": 72,
  "created_at": "2024-11-19T17:40:28.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Pizza!\r\n\r\n::: details [**âœ… Step 1**]\r\nDeclare variables for the information we know:\r\n- `number_of_friends`, which is **5**\r\n- `total_slices` available, which is **20**.\r\n:::\r\n\r\n::: details [**âœ… Step 2**]\r\nTo find out how many slices each friend gets, write an expression that divides `total_slices` by `number_of_friends`. Store the result in a variable called `item_per_person`.\r\n:::\r\n\r\n::: details [**âœ… Step 3**]\r\nPrint a message that contains the number of slices each friend gets. For example: *\"Each person gets 4 slices of pizza.\"*\r\n:::\r\n\r\n::: details [**ðŸ”ŽShow me how**]\r\n![](https://images.code.org/9d6e4eaacc28ea066e4f2e87c27c61f7-image-1732044994556.png)\r\n\r\n![](https://images.code.org/738a8a1a4f3a4edecf83143039502134-image-1732045020309.png)\r\n\r\n![](https://images.code.org/c6fa59fc9b9dd140931b7240cd5d5f92-image-1732045036042.png)\r\n\r\n:::\r\n\r\nYou must run and validate your code to complete the level. \r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "# Step 1\n\n\n# Step 2\n\n\n# Step 3\nmessage = \"\"\nprint(message)",
          "folderId": "0",
          "active": true,
          "open": true,
          "type": "locked_starter"
        }
      },
      "folders": {
      },
      "openFiles": [
        "0"
      ]
    },
    "display_name": "Sharing is Caring!",
    "bubble_choice_description": "Practice python by splitting a pizza amongst friends.",
    "thumbnail_url": "https://images.code.org/7cd76fc2d6e13d5c752681678157c536-pizza.png",
    "validation_file": {
      "id": "1",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\nfrom io import StringIO\nimport sys\n\nclass TestPizzaSlices(unittest.TestCase):\n\n    def setUp(self):\n        # Setup to capture the print output if needed later\n        self.captured_output = StringIO()\n        sys.stdout = self.captured_output\n\n    def tearDown(self):\n        # Reset redirect.\n        sys.stdout = sys.__stdout__\n\n    def test_step_1(self):\n        \"\"\"Test Step 1: Check that number_of_friends and total_slices are defined\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the variables are defined\n        self.assertIn('number_of_friends', locals(), \"Variable 'number_of_friends' should be defined in Step 1.\")\n        self.assertIn('total_slices', locals(), \"Variable 'total_slices' should be defined in Step 1.\")\n\n        # Check if the variables have the correct values\n        self.assertEqual(locals()['number_of_friends'], 5, \"Variable 'number_of_friends' should be 5 in Step 1.\")\n        self.assertEqual(locals()['total_slices'], 20, \"Variable 'total_slices' should be 20 in Step 1.\")\n\n    def test_step_2(self):\n        \"\"\"Test Step 2: Check that item_per_person is correctly calculated\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the variable 'item_per_person' is defined\n        self.assertIn('item_per_person', locals(), \"Variable 'item_per_person' should be defined in Step 2.\")\n\n        # Check if 'item_per_person' is correctly calculated\n        expected_item_per_person = 20 / 5\n        self.assertEqual(locals()['item_per_person'], expected_item_per_person, \"Variable 'item_per_person' should be the result of total_slices / number_of_friends.\")\n\n    def test_step_3(self):\n        \"\"\"Test Step 3: Check that message is defined and is not empty\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the 'message' variable is defined\n        self.assertIn('message', locals(), \"Variable 'message' should be defined in Step 3.\")\n\n        # Ensure 'message' is not an empty string (we are not checking the exact content)\n        self.assertNotEqual(locals()['message'], \"\", \"Variable 'message' should not be an empty string.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "audit_log": "[{\"changed_at\":\"2024-11-19T17:40:28.527+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L2-L8a_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L2-L8a_2024-pilot\"},{\"changed_at\":\"2024-11-19 17:42:47 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":19028,\"changed_by_email\":\"amanda.dennard@code.org\"},{\"changed_at\":\"2024-11-19 17:51:19 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":19028,\"changed_by_email\":\"amanda.dennard@code.org\"},{\"changed_at\":\"2024-11-19 19:39:02 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":19028,\"changed_by_email\":\"amanda.dennard@code.org\"}]"
}]]></config>
</Pythonlab>
