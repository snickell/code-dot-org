<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:59:02.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A comic book enthusiast wants to create a visualization that shows a comparison of the number of wins each character has in a battle.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BattleScene.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getBattles()</code> method to find and return a 1D array containing all <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Battle</code> objects where the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">mainCharacter</code> matches the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">firstCharacter</code> and the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">enemyCharacter</code> matches the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">secondCharacter</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawResults()</code> method with the 1D array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getBattles()</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing nested <code style=\"background-color: #ececec; color: black; font-weight: bold;\">if</code> statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Superhero Battles",
    "bubble_choice_description": "A comic book enthusiast wants to create a visualization that shows a comparison of the number of wins each character has in a battle.",
    "thumbnail_url": "https://images.code.org/17727a98f8649cc14e4f87fb3387987c-superhero.png",
    "starter_assets": {
      "batman.png": "488e2534-91ca-4be3-a5bd-d027d3d5109b.png",
      "superman.png": "a352079e-0bfb-43c2-a105-4e43ebd8498e.png",
      "wonder-woman.png": "fd65f415-cbc3-4cc4-b4f1-0d77c3f57bf1.png",
      "batman-battle.png": "6d306a5a-98f5-4dda-a719-7839e20975d8.png",
      "superman-battle.png": "660efdef-4a4d-45b1-af16-5a856709a6cf.png",
      "wonder-woman-battle.png": "1b4001db-b4bc-427b-a4e0-2a36a94eb8ab.png",
      "supergirl.png": "81b44fd9-1d34-4573-be8e-3e41b22141de.png",
      "joker.png": "51099e29-82b8-4a52-8276-5bcdbcb8dec1.png",
      "lexluther.png": "6b3dbbbd-e5d4-4b63-b7a7-c223620f645b.png",
      "ares.png": "90ffb200-0310-4556-83c0-94698d2c7a98.png",
      "reign.jpg": "4914a162-28ec-4401-b125-f3e6a7d3d587.jpg",
      "cyborg.png": "eea5a30b-16ba-4ade-b28d-1787e33c1e6d.png"
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_validation": "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\nR7PGEnt7qjeo2pMWPgageF5xgVCQMWkc\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of Battle objects using the data from the main.txt and enemy.txt files\n    Battle[] battles = Battle.createBattles(\"main.txt\", \"enemy.txt\");\n\n    // Creates a BattleScene object\n    BattleScene scene = new BattleScene(battles);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the getBattles() method then pass the 1D array returned to a call\n     * to the drawResults() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "BattleScene.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Creates a visualization of character battles\n */\npublic class BattleScene extends Scene {\n\n  private Battle[] battles;      // The 1D array of Battle objects\n\n  /*\n   * Initializes battles to the specified 1D array of Battle objects\n   */\n  public BattleScene(Battle[] battles) {\n    this.battles = battles;\n  }\n\n  /*\n   * Returns the 1D array of Battle objects\n   */\n  public Battle[] getAllBattles() {\n    return battles;\n  }\n\n  /*\n   * Finds and returns a 1D array containing all Battle objects where\n   * the mainCharacter matches the parameter firstCharacter and the\n   * enemeyCharacter matches the parameter secondCharacter\n   */\n  public Battle[] getBattles(String firstCharacter, String secondCharacter) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Count the number of Battle objects where the mainCharacter matches the\n     * parameter firstCharacter and the enemyCharacter matches the parameter\n     * secondCharacter. Then create a 1D array and store each matching Battle object\n     * in the array and return the array.\n     * -----------------------------------------------------------------------------\n     */\n    \n\n    \n\n    return null;\n  }\n\n  /*\n   * Draws the results in the scene\n   */\n  public void drawResults(Battle[] results) {\n    setTextColor(\"white\");\n    setTextHeight(20);\n    setTextStyle(Font.SANS, FontStyle.BOLD);\n    \n    drawImage(results[0].getMainImage(), 0, 0, getWidth());\n    pause(0.2);\n    drawText(results[0].getMainCharacter() + \"\", 150, 300);\n\n    pause(2);\n    clear(\"black\");\n    drawText(results.length + \" battles against\", 100, 150);\n\n    pause(0.5);\n    drawImage(results[0].getEnemyImage(), 0, 0, getWidth());\n    pause(0.2);\n    drawText(results[0].getEnemyCharacter() + \"\", 150, 300);\n  }\n}\n",
        "isVisible": true,
        "tabOrder": 1
      },
      "Battle.java": {
        "text": "/*\n * Represents a character battle\n */\npublic class Battle {\n\n  private String mainCharacter;      // The name of the main character\n  private String mainImage;          // The image file of the main character\n  private String enemyCharacter;     // The name of the enemy character\n  private String enemyImage;         // The image file of the enemy character\n\n  /*\n   * Sets mainCharacter and enemyCharacter to the specified values\n   */\n  public Battle(String mainCharacter, String enemyCharacter) {\n    this.mainCharacter = mainCharacter;\n    this.enemyCharacter = enemyCharacter;\n    this.mainImage = getImageFile(mainCharacter);\n    this.enemyImage = getImageFile(enemyCharacter);\n  }\n\n  /*\n   * Returns the image file to use based on the character's name\n   */\n  public String getImageFile(String characterName) {\n    String image = \"\";\n    \n    if (characterName.equals(\"Batman\")) {\n      image = \"batman-battle.png\";\n    }\n    \n    if (characterName.equals(\"Superman\")) {\n      image = \"superman-battle.png\";\n    }\n\n    if (characterName.equals(\"Wonder Woman\")) {\n      image = \"wonder-woman-battle.png\";\n    }\n\n    if (characterName.equals(\"Supergirl\")) {\n      image = \"supergirl.png\";\n    }\n\n    if (characterName.equals(\"The Joker\")) {\n      image = \"joker.png\";\n    }\n    \n    if (characterName.equals(\"Lex Luthor\")) {\n      image = \"lexluther.png\";\n    }\n\n    if (characterName.equals(\"Ares\")) {\n      image = \"ares.png\";\n    }\n\n    if (characterName.equals(\"Reign\")) {\n      image = \"reign.jpg\";\n    }\n\n    if (characterName.equals(\"Cyborg Superman\")) {\n      image = \"cyborg.png\";\n    }\n\n    return image;\n  }\n\n  /*\n   * Returns the name of the main character\n   */\n  public String getMainCharacter() {\n    return mainCharacter;\n  }\n\n  /*\n   * Returns the name of the enemy character\n   */\n  public String getEnemyCharacter() {\n    return enemyCharacter;\n  }\n\n  /*\n   * Returns the image for the main character\n   */\n  public String getMainImage() {\n    return mainImage;\n  }\n\n  /*\n   * Returns the image for the enemy character\n   */\n  public String getEnemyImage() {\n    return enemyImage;\n  }\n\n  /*\n   * Returns a 1D array of Battle objects using the data in the mainFile and enemyFile\n   */\n  public static Battle[] createBattles(String mainFile, String enemyFile) {\n    String[] mainData = FileReader.toStringArray(mainFile);\n    String[] enemyData = FileReader.toStringArray(enemyFile);\n    Battle[] battleData = new Battle[mainData.length];\n\n    for (int index = 0; index < battleData.length; index++) {\n      battleData[index] = new Battle(mainData[index], enemyData[index]);\n    }\n\n    return battleData;\n  }\n\n  /*\n   * Returns a String containing the names of the main and enemy characters\n   */\n  public String toString() {\n    return mainCharacter + \" vs \" + enemyCharacter;\n  }\n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "main.txt": {
        "text": "Batman\nBatman\nBatman\nBatman\nBatman\nBatman\nBatman\nBatman\nBatman\nBatman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nWonder Woman\nWonder Woman\nWonder Woman\nWonder Woman\nWonder Woman\nWonder Woman\nSupergirl\nSupergirl\nSupergirl\nSupergirl\nSupergirl",
        "isVisible": true,
        "tabOrder": 3
      },
      "enemy.txt": {
        "text": "Joker\nJoker\nJoker\nJoker\nJoker\nJoker\nJoker\nJoker\nJoker\nJoker\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nAres\nAres\nAres\nAres\nAres\nAres\nReign\nReign\nCyborg Superman\nCyborg Superman\nCyborg Superman",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 6
      }
    },
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:59:02.945+00:00\",\"changed\":[\"cloned from \\\"CSA U4L7-L5d_2023\\\"\"],\"cloned_from\":\"CSA U4L7-L5d_2023\"},{\"changed_at\":\"2024-11-26 02:08:08 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":1574,\"changed_by_email\":\"ken.akiha@code.org\"},{\"changed_at\":\"2025-01-07 14:49:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2025-01-07 14:50:39 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
