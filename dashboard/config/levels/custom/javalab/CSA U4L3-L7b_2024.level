<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:58:33.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A researcher wants to determine an approximate width of the largest cities in the world by land area.\r\n\r\nThe researcher assumes that each city is shaped like a circle. To find the approximate width of each city, the researcher needs to find the square root of each value in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">landAreas</code> divided by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.PI</code>.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Research.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calculateSizes()</code> method to return a 1D array containing the approximate width of each city. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calculateSizes()</code> method should:\r\n\r\n1. Traverse the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">cities</code> array.\r\n\r\n2. Calculate the width of the city using the formula\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\n( &radic;(land area / pi) ) * 2\r\n</pre>\r\n\r\n3. Return a 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> array containing the approximate width of each city.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ResearchRunner.java</code>,\r\n\r\n1. Declare and initialize a 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> array to store the array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calculateSizes()</code> method.\r\n\r\n2. Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sizesToString()</code> method to get the values in the 1D array as a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.sqrt()</code> method.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate double array that is length of cities\r\n&nbsp;\r\nloop from 0 to cities.length\r\n  result[index] = Math.sqrt(cities[index].getArea() * Math.PI) * 2\r\n&nbsp;\r\nreturn results\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "City Sizes",
    "bubble_choice_description": "A researcher wants to determine an approximate width of the largest cities in the world by land area.",
    "thumbnail_url": "https://images.code.org/5757594de9c7f3d963698c070fb9c073-city.png",
    "encrypted_validation": "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\n",
    "start_sources": {
      "ResearchRunner.java": {
        "text": "public class ResearchRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of city names\n    String[] names = {\"New York\", \"Tokyo\", \"Chicago\", \"Atlanta\", \"Philadelphia\", \"Boston\",\n                      \"Los Angeles\", \"Dallas/Fort Worth\", \"Houston\", \"Detroit\"};\n\n    // Creates a 1D array of the land areas of each city\n    double[] cityAreas = {8683, 6993, 5498, 5083, 4661, 4497, 4320, 3644, 3355, 3267};\n\n    // Creates a Research object\n    Research cities = new Research(names, cityAreas);\n\n    /* ------------------------------------------- TO DO -------------------------------------------\n     * ‚úÖ Call the calculateSizes() method and print the results using the sizesToString() method.\n     * ---------------------------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Research.java": {
        "text": "/*\n * Analyzes city data\n */\npublic class Research {\n\n  private String[] names;    // The 1D array of the names of each city\n  private double[] cities;   // The 1D array of the land area of each city\n\n  /*\n   * Initializes names and cities to the specified 1D arrays\n   */\n  public Research(String[] names, double[] cities) {\n    this.names = names;\n    this.cities = cities;\n  }\n\n  /*\n   * Returns the 1D array of names\n   */\n  public String[] getNames() {\n    return names;\n  }\n\n  /*\n   * Returns the 1D array of cities\n   */\n  public double[] getCities() {\n    return cities;\n  }\n\n  /*\n   * Returns a 1D array containing the approximate\n   * width of each city in cities\n   */\n  public double[] calculateSizes() {\n    /* ------------------------------------------- TO DO -------------------------------------------\n     * ‚úÖ Get the square root of each city value divided by Math.PI, then multiply the result\n     * by 2. Add the result to a new 1D array and return the array.\n     * ---------------------------------------------------------------------------------------------\n     */\n    \n    \n    \n    return null;\n  }\n\n  /*\n   * Returns a String containing the values in the 1D array\n   */\n  public String sizesToString(double[] values) {\n    String result = \"\";\n\n    for (int index = 0; index < values.length; index++) {\n      result += names[index] + \": \" + values[index] + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "encrypted_exemplar_sources": "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\nXllLWiA+Pg==\n",
    "name_suffix": "_2024",
    "ai_tutor_available": "true"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:58:33.919+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L7b_2023\\\"\"],\"cloned_from\":\"CSA U4L3-L7b_2023\"},{\"changed_at\":\"2024-07-25 05:18:41 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":17326,\"changed_by_email\":\"larsensn@yahoo.com\"},{\"changed_at\":\"2024-07-25 05:19:44 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":17326,\"changed_by_email\":\"larsensn@yahoo.com\"},{\"changed_at\":\"2024-11-14 23:48:47 +0000\",\"changed\":[\"long_instructions\",\"ai_tutor_available\",\"contained_level_names\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-11-14 23:50:47 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-11-14 23:50:55 +0000\",\"changed\":[],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-11-14 23:51:15 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-11-14 23:52:52 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
