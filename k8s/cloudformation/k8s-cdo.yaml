AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Cluster with Fargate Profiles'

Parameters:
  VpcCidr:
    Type: String
    Default: 10.100.0.0/16
    Description: 'CIDR block for the VPC.'

  PublicSubnet1Cidr:
    Type: String
    Default: 10.100.0.0/20
    Description: 'CIDR block for public subnet 1.'

  PublicSubnet2Cidr:
    Type: String
    Default: 10.100.16.0/20
    Description: 'CIDR block for public subnet 2.'

  PrivateSubnet1Cidr:
    Type: String
    Default: 10.100.32.0/20
    Description: 'CIDR block for private subnet 1.'

  PrivateSubnet2Cidr:
    Type: String
    Default: 10.100.48.0/20
    Description: 'CIDR block for private subnet 2.'

Resources:
  # === EKS Cluster and Fargate Profiles ===
  # Main EKS cluster resource that defines the Kubernetes cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: code-dot-org
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
      Version: '1.27'

  # Fargate profile for Pods in the default namespace to run on AWS Fargate
  FargateProfileDefault:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref EKSCluster
      FargateProfileName: default
      PodExecutionRoleArn: !GetAtt EKSFargatePodExecutionRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Selectors:
        - Namespace: default

  # Fargate profile for CoreDNS and other kube-system Pods
  FargateProfileKubeSystem:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref EKSCluster
      FargateProfileName: kube-system
      PodExecutionRoleArn: !GetAtt EKSFargatePodExecutionRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Selectors:
        - Namespace: kube-system
          Labels:
            - Key: k8s-app
              Value: kube-dns

  # === IAM Roles ===
  # IAM role allowing EKS to manage cluster operations
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Name
          Value: k8s-cdo-eks-cluster-role

  # IAM role for Fargate Pod execution, granting permissions to manage Pods
  EKSFargatePodExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: k8s-cdo-fargate-pod-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks-fargate-pods.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
      Tags:
        - Key: Name
          Value: k8s-cdo-fargate-pod-execution-role

  # === Networking and VPC Configuration ===
  # Main VPC to host EKS resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: k8s-cdo-vpc

  # Internet gateway for public subnets
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: k8s-cdo-internet-gateway

  # Attach the Internet gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Security group for EKS Cluster networking
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS Cluster security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: k8s-cdo-cluster-sg
        - Key: kubernetes.io/cluster/code-dot-org
          Value: owned

  # === Subnets ===
  # Public subnets with ELB role for external access
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: k8s-cdo-public-subnet-1
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: kubernetes.io/cluster/code-dot-org
          Value: shared

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: k8s-cdo-public-subnet-2
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: kubernetes.io/cluster/code-dot-org
          Value: shared

  # Private subnets for internal services
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: k8s-cdo-private-subnet-1
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: kubernetes.io/cluster/code-dot-org
          Value: shared

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: k8s-cdo-private-subnet-2
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: kubernetes.io/cluster/code-dot-org
          Value: shared

  # === Route Tables and Associations ===
  # Public route table and route to the Internet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: k8s-cdo-public-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Associate public subnets with the public route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway for private subnet internet access
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: k8s-cdo-nat-gateway

  # Private route tables for each private subnet
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: k8s-cdo-private-route-table-1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: k8s-cdo-private-route-table-2

  # Routes for private subnets to access the NAT Gateway
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  # Associate private subnets with their route tables
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

Outputs:
  ClusterName:
    Description: 'EKS Cluster Name'
    Value: !Ref EKSCluster

  ClusterEndpoint:
    Description: 'EKS Cluster Endpoint'
    Value: !GetAtt EKSCluster.Endpoint

  ClusterSecurityGroupId:
    Description: 'EKS Cluster Security Group ID'
    Value: !Ref ClusterSecurityGroup
